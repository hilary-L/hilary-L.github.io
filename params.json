{"name":"React.js task calendar (part one)","tagline":"Let's make a task calendar using react, flux, and Invision's to-do kit!","body":"This article will detail the building of a Task Calendar app using React.js, Flux, and styles based on Invision's recently released to-do app kit. This is part one of a two-part series. Part two will introduce new features and look at making a mobile version of the calendar using react native. In this article we'll go over the structure of each JSX component as well as the overall structure of the application. I'll also discuss issues that came up as I was making the calendar, and how I resolved them.\r\n\r\nWhile you need not have built an app with react to follow along, you should have a decent understanding of javascript and be familiar with what react is. If you'd like a deeper introduction to react, check out [part one](http://tylermcginnis.com/reactjs-tutorial-a-comprehensive-guide-to-building-apps-with-react/) of Tyler McGinnis' series on react and then come on back.\r\n\r\n![Preview of the finished calendar](https://dl.dropboxusercontent.com/u/54211195/Invision%20Cal%20Article/Screen%20Shot%202015-06-19%20at%2015.10.51.png)\r\n\r\n# 1. Setup\r\n\r\n## Gulp and Dependencies\r\n\r\nYou can find the repo for the finished app here. If you'd like to start with a blank slate, use the project skeleton instead. The skeleton has the entire scaffolding for the project set up, though all of the react files are blank. If you use the skeleton and follow along with the article, you will end up with a functional calendar at the end.\r\n\r\nBefore cloning this project, make sure that you have [node.js](https://nodejs.org/download/) installed. You will also need to have gulp installed globally. After installing node, open your terminal and run:\r\n\r\n`npm install --global gulp`\r\n\r\nThen, to get started with the skeleton, navigate to where you would like your project folder to be and run:\r\n--git clone part--\r\n--cd into directory--\r\n--npm install--\r\n\r\nThis will install all of the dependencies for the project and get us ready to put in our react code. Gulp will process our JSX into javascript using browserify/reactify, and will compile our scss files using gulp-compass. The gulp workflow in this project is based off of the workflow demonstrated by [part two](http://tylermcginnis.com/reactjs-tutorial-pt-2-building-react-applications-with-gulp-and-browserify/) of Tyler McGinnis' series, but has been modified to include tasks to take care of our stylesheets. I won't be going over how the gulpfile works to process our files, as it's outside the scope of this article. If you would like more information on how to use gulp, browserify, and reactify for your react project, check out Tyler McGinnis' series.\r\n\r\nOnce you've installed the dependencies, in your terminal window, run:\r\n\r\n`gulp`\r\n\r\nThis should start the gulp watch task, which will take care of our jsx transformations and scss processing as we fill out our components. At the end of the project, you can run\r\n\r\n`gulp production`\r\n\r\nAnd all of the files will be minified into a production build. A final note on gulp: If your app does not seem to be responding to changes, check your terminal. If reactify encounters errors in your JSX, it will throw an error and stop watching your files for changes. To resume watching, fix the error in your file(s) and run gulp in your terminal again.\r\n\r\n## Styles\r\n\r\nI've left the complete styles for the project in the project skeleton. You can see the Sass in \\sass\\app.scss, and the compiled css in \\src\\css\\app.css. In order to complete this article you won't need to modify the styles for the project, but if you wish to make changes to the app.scss file, make sure that you're gulp task is running so that your main stylesheet is updated in response to your changes.\r\n\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}